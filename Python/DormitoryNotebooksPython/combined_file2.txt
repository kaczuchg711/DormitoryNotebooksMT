from django import forms


class RentForm(forms.Form):

    def __init__(self, availableItems):
        super().__init__(),
        choices = list()
        for item in availableItems:
            choices.append((item.number.__str__(), item.number.__str__() + ". " + item.name))
        self.fields["items"] = forms.ChoiceField(choices=choices)



class TurnBackForm(forms.Form):
    pass# Generated by Django 3.0.8 on 2020-08-21 09:56

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('rental', '0001_initial'),
    ]

    operations = [
        migrations.RenameField(
            model_name='rentitem',
            old_name='id_Dorm',
            new_name='Dorm',
        ),
        migrations.RenameField(
            model_name='rentitem',
            old_name='id_User',
            new_name='User',
        ),
    ]
# Generated by Django 3.0.8 on 2020-11-03 17:33

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('organizations', '0003_auto_20200809_1713'),
        ('rental', '0009_delete_item'),
    ]

    operations = [
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('isAvailable', models.BooleanField(default=True)),
                ('dorm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organizations.Dorm')),
            ],
        ),
    ]
# Generated by Django 3.0.8 on 2020-11-03 17:27

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('organizations', '0003_auto_20200809_1713'),
        ('rental', '0007_auto_20200919_1103'),
    ]

    operations = [
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('isAvailable', models.BooleanField(default=True)),
                ('dorm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organizations.Dorm')),
            ],
        ),
    ]
# Generated by Django 3.0.8 on 2021-01-10 18:58

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('rental', '0012_auto_20201114_1836'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='rentitem',
            name='dorm',
        ),
    ]
# Generated by Django 3.0.8 on 2020-11-03 17:48

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('rental', '0010_item'),
    ]

    operations = [
        migrations.AddField(
            model_name='item',
            name='number',
            field=models.IntegerField(default=0),
        ),
    ]
# Generated by Django 3.0.8 on 2020-11-14 17:36

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('rental', '0011_item_number'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='rentitem',
            name='itemName',
        ),
        migrations.AddField(
            model_name='rentitem',
            name='item',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='rental.Item'),
        ),
    ]
# Generated by Django 3.0.8 on 2020-08-21 09:54

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organizations', '0003_auto_20200809_1713'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RentItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemName', models.CharField(max_length=255)),
                ('rentalDate', models.DateField()),
                ('rentHour', models.TimeField()),
                ('returnHour', models.TimeField()),
                ('id_Dorm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organizations.Dorm')),
                ('id_User', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
# Generated by Django 3.0.8 on 2020-11-03 17:28

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('rental', '0008_item'),
    ]

    operations = [
        migrations.DeleteModel(
            name='Item',
        ),
    ]
# Generated by Django 3.0.8 on 2020-08-21 10:09

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('rental', '0005_auto_20200821_1007'),
    ]

    operations = [
        migrations.AlterField(
            model_name='rentitem',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
    ]
# Generated by Django 3.0.8 on 2020-08-21 10:07

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('rental', '0003_auto_20200821_0957'),
    ]

    operations = [
        migrations.AlterField(
            model_name='rentitem',
            name='rentHour',
            field=models.TimeField(default=None),
        ),
        migrations.AlterField(
            model_name='rentitem',
            name='rentalDate',
            field=models.DateField(default=None),
        ),
        migrations.AlterField(
            model_name='rentitem',
            name='returnHour',
            field=models.TimeField(default=None),
        ),
    ]
# Generated by Django 3.0.8 on 2020-09-19 11:03

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('rental', '0006_auto_20200821_1009'),
    ]

    operations = [
        migrations.AlterField(
            model_name='rentitem',
            name='returnHour',
            field=models.TimeField(default=None, null=True),
        ),
    ]
# Generated by Django 3.0.8 on 2020-08-21 09:57

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('rental', '0002_auto_20200821_0956'),
    ]

    operations = [
        migrations.RenameField(
            model_name='rentitem',
            old_name='Dorm',
            new_name='dorm',
        ),
        migrations.RenameField(
            model_name='rentitem',
            old_name='User',
            new_name='user',
        ),
    ]
# Generated by Django 3.0.8 on 2020-08-21 10:07

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('rental', '0004_auto_20200821_1007'),
    ]

    operations = [
        migrations.AlterField(
            model_name='rentitem',
            name='id',
            field=models.IntegerField(primary_key=True, serialize=False),
        ),
    ]
from MySQLdb.converters import NoneType
from django.contrib.auth.decorators import login_required
from django.shortcuts import render, redirect

# Create your views here.
from django.utils.datastructures import MultiValueDictKeyError

from global_fun import print_with_enters
from rental.models.DBmodels.RentItem import RentItem
from rental.models.DBmodels.Item import Item
from rental.forms import RentForm, TurnBackForm


@login_required(redirect_field_name='', login_url='/')
def create_base_view(request):
    # todo check itemName. The users are really bad

    try:
        itemName = _get_item_name(request)
    except KeyError:
        return redirect("choice")

    dormId = request.session.get('dorm_id')
    itemsIds = _get_items_list(dormId, itemName)
    rentData = _prepare_rent_data(itemsIds)
    form, buttonString, formAction = _get_form_information_depend_on_avaiableItems(request, dormId, itemName)

    context = {
        'rentData': rentData,
        'availableItemsForm': form,
        'buttonString': buttonString,
        'formAction': formAction
    }
    return render(request, "rental/rental.html", context)


def _get_item_name(request):
    # user choose item for rent
    try:
        itemName = request.POST['button']
        request.session['name_item_to_rent'] = itemName
        return itemName
    except MultiValueDictKeyError:
        try:
            # user reload page
            itemName = request.session["last_rent_item"]
            return itemName
        except KeyError:
            # user want enter rent page from url
            return redirect("choice")


def _get_items_list(dormId, itemName):
    itemsInDorm = Item.objects.filter(dorm_id=dormId, name=itemName)
    itemsId = [item.id for item in itemsInDorm]
    return itemsId


def _prepare_rent_data(itemsIds):
    rentItemLogs = RentItem.objects.filter(item_id__in=itemsIds)

    dates = [row.rentalDate.isoformat() for row in rentItemLogs]
    users = [i.user for i in rentItemLogs]
    userNames = [x.first_name for x in users]
    userLastNames = [x.last_name for x in users]
    roomUserNumbers = [x.room_number for x in users]
    rentHour = [row.rentHour.isoformat() for row in rentItemLogs if row.rentHour is not None]

    returnHour = []
    for row in rentItemLogs:
        if type(row.returnHour) is not NoneType:
            returnHour.append(row.returnHour.isoformat())
        else:
            returnHour.append("")

    rentData = zip(dates, userNames, userLastNames, roomUserNumbers, rentHour, returnHour)
    return rentData


def _get_form_information_depend_on_avaiableItems(request, dormId, itemName):
    availableItems = Item.objects.filter(dorm_id=dormId, isAvailable=True, name=itemName)

    if RentItem.user_already_renting(request):
        form = TurnBackForm()
        buttonString = "zwróć"
        formAction = "turnBack"
    else:
        form = RentForm(availableItems)
        buttonString = "wypożycz"
        formAction = "rentItem"

    return form, buttonString, formAction
from django.contrib import admin

# Register your models here.
from django.apps import AppConfig



class RentalConfig(AppConfig):
    name = 'rental'
import time

from MySQLdb import Date, Time
from django.core.handlers.wsgi import WSGIRequest
from django.db import models
from django.shortcuts import redirect
from django.utils.datastructures import MultiValueDictKeyError

from global_fun import print_with_enters, print_Post, print_session, get_column_values
from organizations.models import Dorm
from rental.models.DBmodels.Item import Item
from users.models import CustomUser


class RentItem(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    item = models.ForeignKey(Item, on_delete=models.CASCADE, default=None)
    rentalDate = models.DateField(default=None)
    rentHour = models.TimeField(default=None)
    returnHour = models.TimeField(default=None, null=True)

    @classmethod
    def decide_about_rent(cls, request):
        print_Post(request)
        if request.POST["submit"] == "turnBack":
            cls.turn_back(request)
        elif request.POST["submit"] == "rentItem":
            cls.rent(request)

        return redirect("rent")

    @classmethod
    def turn_back(cls, request):
        t = time.localtime()
        returnHour = time.strftime("%H:%M:%S", t)
        itemToRentName = request.session["name_item_to_rent"]
        rentItemLog = cls.objects.filter(user=request.user, item__name=itemToRentName, returnHour=None)[0]
        rentItemLog.returnHour = returnHour
        rentItemLog.save()

        itemToRent = Item.objects.filter(id=rentItemLog.item_id)[0]
        itemToRent.isAvailable = True
        itemToRent.save()

        request.session["last_rent_item"] = itemToRent.name

    @classmethod
    def rent(cls, request):

        user, dorm, itemName, rentalDate, rentHour = cls._collect_data_for_RentItem(request)

        itemToRent = Item.objects.filter(dorm=dorm, name=itemName, number=request.POST["items"])[0]

        rentItem = cls(user=user, item_id=itemToRent.id, rentalDate=rentalDate, rentHour=rentHour)
        rentItem.save()
        itemToRent.isAvailable = False
        itemToRent.save()

        request.session["last_rent_item"] = itemName

    @staticmethod
    def _collect_data_for_RentItem(request):
        user = request.user
        dormID = request.session.get("dorm_id")
        dorm = Dorm.objects.filter(id=dormID)[0]
        itemName = request.session['name_item_to_rent']

        rentalDate = Date.today()
        t = time.localtime()
        rentHour = time.strftime("%H:%M:%S", t)

        return user, dorm, itemName, rentalDate, rentHour

    @staticmethod
    def user_already_renting(request: WSGIRequest):
        dormID = request.session.get("dorm_id")
        dorm = Dorm.objects.filter(id=dormID)[0]
        itemName = request.session['name_item_to_rent']

        areAvaible = Item.objects.filter(dorm=dorm, name=itemName)
        ItemsWithFalseIsAvaibleids = areAvaible.filter(isAvailable=False).values_list("id")

        if len(RentItem.objects.filter(user=request.user, returnHour=None,
                                       item_id__in=ItemsWithFalseIsAvaibleids)) == 0:
            return False
        areAvaible = get_column_values(areAvaible, "isAvailable")

        if False in areAvaible:
            return True
        else:
            return False
from django.db import models
from organizations.models import Dorm


class Item(models.Model):
    name = models.CharField(max_length=255)
    number = models.IntegerField(default=0)
    dorm = models.ForeignKey(Dorm, on_delete=models.CASCADE)
    isAvailable = models.BooleanField(default=True)

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'DormitoryNotebooksET.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
from django import forms

from global_fun import print_with_enters


class LoginForm(forms.Form):
    def __init__(self, dormsTupleTuples):
        super().__init__()
        choices = ((x, x.__str__()) for x in dormsTupleTuples)

        self.fields["dorms"] = forms.ChoiceField(choices=choices)
        self.fields["email"] = forms.CharField()
        self.fields["password"] = forms.CharField(widget=forms.PasswordInput)


from django import forms
from django.contrib.auth.forms import UserCreationForm
from users.models import CustomUser


class registrationForm(UserCreationForm):
    first_name = forms.CharField(max_length=30, required=True, help_text='Required.')
    last_name = forms.CharField(max_length=30, required=True, help_text='Required.')
    email = forms.EmailField(max_length=254, help_text='Required. Inform a valid email address.')
    room = forms.CharField(max_length=10, required=True)
    dorm = forms.ChoiceField()

    def __init__(self,dormsTupleTuples, *args, **kwargs):
        super().__init__(*args, **kwargs)
        choices = ((x, x.__str__()) for x in dormsTupleTuples)
        print_with_enters(choices)
        self.fields["dorm"] = forms.ChoiceField(choices=choices)

    class Meta:
        model = CustomUser
        fields = ('first_name', 'last_name', 'email', "dorm", 'room', 'password1', 'password2')
# Generated by Django 3.0.8 on 2020-08-10 18:42

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('organizations', '0003_auto_20200809_1713'),
        ('security', '0005_student'),
    ]

    operations = [
        migrations.CreateModel(
            name='User_Associate_with_Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_organization', models.ForeignKey(on_delete=models.SET(0), to='organizations.Organization')),
                ('id_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='User_Associate_with_Dorm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_organization', models.ForeignKey(on_delete=models.SET(0), to='organizations.Organization')),
                ('id_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
# Generated by Django 3.0.8 on 2020-08-07 10:16

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60)),
                ('acronym', models.CharField(max_length=10)),
            ],
        ),
    ]
# Generated by Django 3.0.8 on 2020-11-28 15:58

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('security', '0011_blocked_users'),
    ]

    operations = [
        migrations.RenameModel(
            old_name='Blocked_Users',
            new_name='BlockedUsers',
        ),
    ]
# Generated by Django 3.0.8 on 2020-08-08 20:04

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('security', '0002_dorm_dorm_associative_oraganaizor'),
    ]

    operations = [
        migrations.RenameField(
            model_name='dorm_associative_oraganaizor',
            old_name='id_oraganization',
            new_name='id_organization',
        ),
    ]
# Generated by Django 3.0.8 on 2020-08-26 12:23

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('security', '0009_auto_20200810_1851'),
    ]

    operations = [
        migrations.DeleteModel(
            name='Student',
        ),
    ]
# Generated by Django 3.0.8 on 2020-08-10 18:51

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('security', '0008_user_associate_with_dorm'),
    ]

    operations = [
        migrations.AlterField(
            model_name='student',
            name='room',
            field=models.IntegerField(),
        ),
    ]
# Generated by Django 3.0.8 on 2020-08-08 20:03

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('security', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Dorm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60)),
            ],
        ),
        migrations.CreateModel(
            name='Dorm_associative_Oraganaizor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_dorm', models.ForeignKey(on_delete=models.SET(0), to='security.Dorm')),
                ('id_oraganization', models.ForeignKey(on_delete=models.SET(0), to='security.Organization')),
            ],
        ),
    ]
# Generated by Django 3.0.8 on 2020-11-28 15:25

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('security', '0010_delete_student'),
    ]

    operations = [
        migrations.CreateModel(
            name='Blocked_Users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login', models.TextField(default='')),
                ('count', models.TextField(default=0)),
                ('ip', models.TextField(default='')),
                ('blocked', models.BooleanField(default=False)),
                ('blocking_time', models.TimeField(default=None)),
            ],
        ),
    ]
# Generated by Django 3.0.8 on 2020-08-10 18:48

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('organizations', '0003_auto_20200809_1713'),
        ('security', '0007_delete_user_associate_with_dorm'),
    ]

    operations = [
        migrations.CreateModel(
            name='User_Associate_with_Dorm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_dorm', models.ForeignKey(on_delete=models.SET(0), to='organizations.Dorm')),
                ('id_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
# Generated by Django 3.0.8 on 2020-08-08 20:25

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('security', '0003_auto_20200808_2004'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='dorm_associative_oraganaizor',
            name='id_dorm',
        ),
        migrations.RemoveField(
            model_name='dorm_associative_oraganaizor',
            name='id_organization',
        ),
        migrations.DeleteModel(
            name='Dorm',
        ),
        migrations.DeleteModel(
            name='Dorm_associative_Oraganaizor',
        ),
        migrations.DeleteModel(
            name='Organization',
        ),
    ]
# Generated by Django 3.0.8 on 2020-12-06 09:57

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('security', '0012_auto_20201128_1658'),
    ]

    operations = [
        migrations.AlterField(
            model_name='blockedusers',
            name='blocking_time',
            field=models.TimeField(default='00:00:00'),
        ),
    ]
# Generated by Django 3.0.8 on 2020-08-10 18:47

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('security', '0006_user_associate_with_dorm_user_associate_with_organization'),
    ]

    operations = [
        migrations.DeleteModel(
            name='User_Associate_with_Dorm',
        ),
    ]
# Generated by Django 3.0.8 on 2020-08-10 18:30

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('security', '0004_auto_20200808_2025'),
    ]

    operations = [
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room', models.IntegerField(max_length=10)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
from time import sleep

from MySQLdb._exceptions import IntegrityError
from django.contrib.auth.models import Group
from django.shortcuts import redirect

from organizations.models import Organization, Dorm, Associate_with_Dorms
from rental.models.DBmodels.Item import Item
from security.models.DBmodels.User_Associate_with_Dorm import User_Associate_with_Dorm
from security.models.DBmodels.User_Associate_with_Organization import User_Associate_with_Organization
from users.models import CustomUser


class BasicDB:
    def __init__(self):
        self.groups = {}
        self.users = {}
        self.dorms = {}

    def create_organizations(self):
        if not Organization.organization_in_db("PK"):
            Organization(name="Politechnika Krakowska", acronym="PK").save()
        if not Organization.organization_in_db("UJ"):
            Organization(name="Uniwersytet Jagieloński ", acronym="UJ").save()
        if not Organization.organization_in_db("AGH"):
            Organization(name="Akademia Górniczo Hutnicza", acronym="AGH").save()

    def create_dorms(self):

        self.dorms = {
            "PK": ("DS B1 Bydgoska", "DS1 Rumcajs", "DS2 Leon", "DS3 Bartek", "DS4 Balon"),
            "UJ": ("Akademik UJ1", "Akademik UJ2","Piast"),
            "AGH": ("Olimp", "Akropol", "Hajduczek"),
        }

        organizations_acronyms = self.dorms.keys()

        created_dorms = [x.name for x in Dorm.objects.all()]

        for acronym in organizations_acronyms:
            for name in self.dorms[acronym]:
                if name in created_dorms:
                    continue
                dorm = Dorm(name=name)
                dorm.save()

    def associate_dorms_with_organization(self):
        for organization_acronym in self.dorms.keys():
            for dorm_name in self.dorms[organization_acronym]:
                Associate_with_Dorms.associate(dorm_name, organization_acronym)

    def create_users(self):
        try:
            CustomUser.objects.create_superuser("tkacza", "pomidorowa")
            self.users["student1"] = CustomUser.objects.create_user("student1", "pomidorowa")
            self.users["porter1"] = CustomUser.objects.create_user("porter1", "pomidorowa")
            self.users["supervisor1"] = CustomUser.objects.create_user("supervisor1", "pomidorowa")
        except:
            Warning("Users exist")

    def associate_users_with_organization(self):
        User_Associate_with_Organization.associate("student1", "PK")
        User_Associate_with_Organization.associate("porter1", "PK")
        User_Associate_with_Organization.associate("supervisor1", "PK")

    def associate_users_with_dorms(self):
        User_Associate_with_Dorm.associate("student1", "DS B1 Bydgoska")
        User_Associate_with_Dorm.associate("porter1", "DS B1 Bydgoska")
        User_Associate_with_Dorm.associate("supervisor1", "DS B1 Bydgoska")

    def create_groups(self):


        self.groups = {

            "students": None,
            "porters": None,
            "supervisors": None

        }
        group_already_existed = False
        try:
            self.groups["students"] = Group.objects.create(name='students')
        except:
            Warning("Group exist")
            self.groups["students"] = Group.objects.get(name='students')

        try:
            self.groups["porters"] = Group.objects.create(name='porters')
        except:
            Warning("Group exist")
            self.groups["porters"] = Group.objects.get(name='porters')

        try:
            self.groups["supervisors"] = Group.objects.create(name='supervisors')
        except:
            Warning("Group exist")
            self.groups["supervisors"] = Group.objects.get(name='supervisors')

    def add_user_to_group(self):
        self.groups["students"].user_set.add(self.users["student1"])
        self.groups["porters"].user_set.add(self.users["porter1"])
        self.groups["supervisors"].user_set.add(self.users["supervisor1"])

    def create_items(self):
        dorm_id = Dorm.objects.filter(name="DS B1 Bydgoska")[0].id
        for i in range(3):
            if not len(Item.objects.all()) == 3:
                Item.objects.create(name="vacuum cleaner", isAvailable=True, dorm_id=dorm_id, number=i)


def create_basic_db(request):
    db = BasicDB()
    db.create_organizations()
    db.create_dorms()
    db.associate_dorms_with_organization()
    db.create_users()
    db.associate_users_with_organization()
    db.associate_users_with_dorms()
    db.create_groups()
    db.add_user_to_group()
    db.create_items()
    # todo items
    return redirect("organization")
from MySQLdb._exceptions import IntegrityError
from django.contrib.auth import authenticate, login
from django.contrib.auth.models import User
from django.forms import models
from django.shortcuts import redirect, render
from django.contrib import messages
from ipware import get_client_ip

from global_fun import print_with_enters, print_Post, print_session
from organizations.models import Organization, Dorm
from organizations import views as organizationsView

from security.forms import LoginForm, registrationForm
from security.models.fun import create_user_to_log_in
from security.models.DBmodels.BlockedUsers import BlockedUsers
from users.models import CustomUser


def get_home_view(request):
    organization_id = request.session.get('organization_id')

    if request.session.get('organization_id') is None:
        return organizationsView.get_organization_view(request)

    context = _prepare_context_data(organization_id)
    return render(request, template_name='security/home.html', context=context)


def _prepare_context_data(organization_id):
    organization = Organization.objects.filter(id=organization_id)[0]
    organizations_dorms_names = organization.get_dorms_names()

    form = LoginForm(organizations_dorms_names)
    if form.is_valid():
        form.save()
        context = {
            'organizationLogoPath': "img/" + organization.acronym + "_logo.png",
            'organizations_dorms_names': organizations_dorms_names,
            'form': form,
        }
        return context
    else:
        context = {
            'organizationLogoPath': "img/" + organization.acronym + "_logo.png",
            'organizations_dorms_names': organizations_dorms_names,
            'form': form,
        }
        return context


def log_in(request):
    user = _get_authenticate_user(request)

    if _data_ok(request, user):
        login(request, user)
        return redirect("/choice")
    else:
        return redirect("/")


def _get_authenticate_user(request):
    email = request.POST['email']
    password = request.POST['password']
    return authenticate(request, email=email, password=password)


def _data_ok(request, user: User):
    client_ip, is_routable = get_client_ip(request)

    try:
        blockedUser = BlockedUsers.objects.filter(ip=client_ip)[0]
    except IndexError:
        blockedUser = None

    if blockedUser is not None and blockedUser.blocked:
        if not blockedUser.block_time_passed():
            messages.add_message(request, messages.INFO, "too many attempts wait a moment")
            return False
        else:
            blockedUser.delete_user_from_blocked_list()

    if user is not None:
        dormName = request.POST['dorms']
        request.session['dorm_id'] = Dorm.objects.filter(name=dormName)[0].id
        if user.is_superuser:
            return True

        organizationId = request.session.get("organization_id")
        try:
            LoginUser = create_user_to_log_in(user)
        except ValueError:
            messages.add_message(request, messages.INFO, "wrong data")
            return False

        if LoginUser.check_requirement(user, organizationId, dormName):
            return True

    if blockedUser is None:
        BlockedUsers.create_blocked_user(request)
    else:
        blockedUser.increase_number_of_wrong_attempts()
        blockedUser.check_count_breach_and_block()

    messages.add_message(request, messages.INFO, "wrong data")
    return False


def get_registration_view(request):
    organization_id = request.session["organization_id"]
    organization = Organization.objects.filter(id=organization_id)[0]
    organizations_dorms_names = organization.get_dorms_names()
    form = registrationForm(organizations_dorms_names)
    context = {
        "form": form
    }
    return render(request, template_name="security/registration.html", context=context)


def register(request):
    try:
        user = CustomUser.objects.create_user(password=request.POST["password1"], first_name=request.POST["first_name"],
                                          last_name=request.POST["last_name"], email=request.POST["email"],
                                          room_number=request.POST["room"])

        user.save()
    except Exception:
        return redirect("registration")

    return redirect("organization")
from security.tests.TestCaseWithDefaultDB import TestCaseWithDefaultDB


class TestPrepareLogIn(TestCaseWithDefaultDB):
    def test_redirect_to_organization(self):
        response = self.client.post(self.login_url)
        self.assertEqual(200, response.status_code)
        self.assertTemplateUsed(response, 'security/organization.html')

    def test_can_gain_access_to_home_page(self):
        self._choose_organization()

        response = self.client.post('', {})

        self.assertTemplateUsed(response, 'security/home.html')

    def _choose_organization(self):
        session = self.client.session
        session['organization_id'] = self.organizations['PK'].id
        session.save()
from security.models.fun import create_user_to_log_in
from security.tests.TestCaseWithDefaultDB import TestCaseWithDefaultDB
from users.models import CustomUser


class TestCheckRequirement(TestCaseWithDefaultDB):
    def test_check_student_requirements(self):
        loggingInUser = create_user_to_log_in(self.users["test_student"])

        self.assertTrue(loggingInUser.check_requirement(self.users["test_student"], self.organizations["PK"].id, self.dorms["DS2 Leon"].name))

        self.assertFalse(loggingInUser.check_requirement(self.users["test_student"], self.organizations["PK"].id, "wrong dorm name"))
        self.assertFalse(loggingInUser.check_requirement(self.users["test_student"], 0, self.dorms["DS2 Leon"].name))
        self.assertFalse(loggingInUser.check_requirement(CustomUser.objects.create(email="user with out association", password='123'), self.organizations["PK"].id, self.dorms["DS2 Leon"].name))

    def test_check_supervisor_requirements(self):
        loggingInUser = create_user_to_log_in(self.users["test_supervisor"])

        self.assertTrue(loggingInUser.check_requirement(self.users["test_supervisor"], self.organizations["PK"].id, self.dorms["DS2 Leon"].name))
        self.assertTrue(loggingInUser.check_requirement(self.users["test_supervisor"], self.organizations["PK"].id, "wrong dorm name"))

        self.assertFalse(loggingInUser.check_requirement(self.users["test_supervisor"], 0, self.dorms["DS2 Leon"].name))
        self.assertFalse(loggingInUser.check_requirement(CustomUser.objects.create(email="user with out association", password="123"), self.organizations["PK"].id, self.dorms["DS2 Leon"].name))
from django.contrib.auth.models import Group

from security.models.fun import create_user_to_log_in
from security.models.NonDBmodels.Supervisor import Supervisor
from security.models.NonDBmodels.Student import Student
from security.tests.TestCaseWithDefaultDB import TestCaseWithDefaultDB
from users.models import CustomUser

class TestCreateUserToLogIn(TestCaseWithDefaultDB):
    def test_check_created_type_for_supervisor(self):
        loggingInUser = create_user_to_log_in(self.users["test_supervisor"])
        self.assertEqual(type(loggingInUser), Supervisor)

    def test_check_created_for_student(self):
        loggingInUser = create_user_to_log_in(self.users["test_student"])
        self.assertEqual(type(loggingInUser), Student)

    def test_created_user_without_group(self):
        userWithoutGroup = CustomUser.objects.create(email="user_without_group", password="123")

        with self.assertRaises(ValueError):
            create_user_to_log_in(userWithoutGroup)

    def test_created_user_with_wrong_group(self):
        user = CustomUser.objects.create(email="user_with_wrong_group", password="123")
        self._prepare_wrong_group(user)

        with self.assertRaises(ValueError):
            create_user_to_log_in(user)

    def _prepare_wrong_group(self, user):
        group = Group.objects.create(name='wrong group name')
        group.save()
        group.user_set.add(user)
from django.contrib.auth.models import Group
from django.test import TestCase
from django.urls import reverse

from organizations.models import Organization, Dorm, Associate_with_Dorms
from security.models.DBmodels.User_Associate_with_Dorm import User_Associate_with_Dorm
from security.models.DBmodels.User_Associate_with_Organization import User_Associate_with_Organization
from users.models import CustomUser


class TestCaseWithDefaultDB(TestCase):
    def setUp(self):
        self.login_url = reverse('index')

        self.users = {}
        self.users["test_student"] = CustomUser.objects.create_user("test_student", "123")
        self.users["test_supervisor"] = CustomUser.objects.create_user("test_supervisor", "123")
        self.users["test_student"].save()
        self.users["test_supervisor"].save()

        self.organizations = {}
        self.organizations["PK"] = Organization.objects.create(name="Politechnika Krakowska", acronym="PK")
        self.organizations["PK"].save()

        self.dorms = {}
        self.dorms["DS2 Leon"] = (Dorm.objects.create(name="DS2 Leon"))
        self.dorms["DS2 Leon"].save()

        Associate_with_Dorms.associate("DS2 Leon", "PK")

        User_Associate_with_Organization.associate("test_student", "PK")
        User_Associate_with_Organization.associate("test_supervisor", "PK")
        User_Associate_with_Dorm.associate("test_student", "DS2 Leon")

        group = Group.objects.create(name='students')
        group.save()
        group.user_set.add(self.users["test_student"])

        group = Group.objects.create(name='supervisors')
        group.save()
        group.user_set.add(self.users["test_supervisor"])
# selinum
from time import sleep

from django.contrib.auth.models import Group
from django.contrib.staticfiles.testing import StaticLiveServerTestCase
from selenium import webdriver

from organizations.models import Organization, Dorm, Associate_with_Dorms
from security.models.DBmodels.User_Associate_with_Dorm import User_Associate_with_Dorm
from security.models.DBmodels.User_Associate_with_Organization import User_Associate_with_Organization
from users.models import CustomUser


class TestLogIn(StaticLiveServerTestCase):
    def setUp(self):
        self.driver = webdriver.Firefox(executable_path=r'drivers/geckodriver')

        self.users = {
            "test_student": CustomUser.objects.create_user("test_student", "correctPassword"),
            "test_supervisor": CustomUser.objects.create_user("test_supervisor", "correctPassword")
        }
        self.users["test_student"].save()
        self.users["test_supervisor"].save()

        self.organizations = {"PK": Organization.objects.create(name="Politechnika Krakowska", acronym="PK")}
        self.organizations["PK"].save()

        self.dorms = {
            "DS1 Rumcajs": Dorm.objects.create(name="DS1 Rumcajs"),
            "DS2 Leon": Dorm.objects.create(name="DS2 Leon")
        }
        self.dorms["DS1 Rumcajs"].save()
        self.dorms["DS2 Leon"].save()

        Associate_with_Dorms.associate("DS1 Rumcajs", "PK")
        Associate_with_Dorms.associate("DS2 Leon", "PK")

        self.organizations = {"UJ": Organization.objects.create(name="Uniwersytet Jagieloński", acronym="UJ")}
        self.organizations["UJ"].save()

        self.dorms = {
            "Żaczek": Dorm.objects.create(name="Żaczek"),
            "Piast": Dorm.objects.create(name="Piast")
        }
        self.dorms["Żaczek"].save()
        self.dorms["Piast"].save()

        Associate_with_Dorms.associate("Żaczek", "UJ")
        Associate_with_Dorms.associate("Piast", "UJ")

        User_Associate_with_Organization.associate("test_student", "PK")
        User_Associate_with_Organization.associate("test_supervisor", "PK")
        User_Associate_with_Dorm.associate("test_student", "DS2 Leon")

        group = Group.objects.create(name='students')
        group.save()
        group.user_set.add(self.users["test_student"])

        group = Group.objects.create(name='supervisors')
        group.save()
        group.user_set.add(self.users["test_supervisor"])

    def test_student_log_in_with_correct_data(self):
        # build
        self.driver.get(self.live_server_url)
        # operate
        self._pass_logIn_sites("PK", "DS2 Leon", "test_student", "correctPassword")
        # check
        self.assertEqual("choice", self.driver.title)

    def test_student_log_in_with_wrong_password(self):
        # build
        self.driver.get(self.live_server_url)
        # operate
        self._pass_logIn_sites("PK", "DS2 Leon", "test_student", "wrongPassword")
        # check
        self.assertEqual("home", self.driver.title)

    def test_student_log_in_with_wrong_email(self):
        # build
        self.driver.get(self.live_server_url)
        # operate
        self._pass_logIn_sites("PK", "DS2 Leon", "wrong_email", "correctPassword")
        # check
        self.assertEqual("home", self.driver.title)

    def test_student_log_in_with_wrong_dorm_name(self):
        # build
        self.driver.get(self.live_server_url)
        # operate
        self._pass_logIn_sites("PK", "DS1 Rumcajs", "test_student", "correctPassword")
        # check
        self.assertEqual("home", self.driver.title)

    def test_student_log_in_with_wrong_organization_acronym(self):
        # build
        self.driver.get(self.live_server_url)
        # operate
        self._pass_logIn_sites("UJ", "Żaczek", "test_student", "correctPassword")
        # check
        self.assertEqual("home", self.driver.title)

    def test_supervisor_log_in_with_correct_data(self):
        # build
        self.driver.get(self.live_server_url)
        # operate
        self._pass_logIn_sites("PK", "DS2 Leon", "test_supervisor", "correctPassword")
        # check
        self.assertEqual("choice", self.driver.title)

    def test_supervisor_log_in_with_wrong_email(self):
        # build
        self.driver.get(self.live_server_url)
        # operate
        self._pass_logIn_sites("PK", "DS2 Leon", "wrong_email", "correctPassword")
        # check
        self.assertEqual("home", self.driver.title)

    def test_supervisor_log_in_with_different_dorm_name(self):
        # build
        self.driver.get(self.live_server_url)
        # operate
        self._pass_logIn_sites("PK", "DS1 Rumcajs", "test_supervisor", "correctPassword")
        # check
        self.assertEqual("choice", self.driver.title)

    def test_supervisor_log_in_with_wrong_organization_acronym(self):
        # build
        self.driver.get(self.live_server_url)
        # operate
        self._pass_logIn_sites("UJ", "Żaczek", "test_supervisor", "correctPassword")
        # check
        self.assertEqual("home", self.driver.title)



    def _pass_logIn_sites(self, organizationAcronym, dormName, email, password):
        button = self.driver.find_element_by_id(organizationAcronym)
        button.click()
        self.driver.find_element_by_xpath("//select[@name='dorms']/option[text()='" + dormName + "']").click()
        emailInput = self.driver.find_element_by_name("email")
        emailInput.send_keys(email)
        passwordInput = self.driver.find_element_by_name("password")
        passwordInput.send_keys(password)
        self.driver.find_element_by_name("submit").click()

    def tearDown(self):
        self.driver.close()
from django.contrib import admin

# Register your models here.
from django.apps import AppConfig


class SecurityConfig(AppConfig):
    name = 'security'
from django.contrib.auth.models import Group

from security.models.NonDBmodels.Porter import Porter
from security.models.NonDBmodels.Student import Student
from security.models.NonDBmodels.Supervisor import Supervisor





def create_user_to_log_in(user):

    if not user.is_in_any_group():
        raise ValueError()
    elif user.is_in_group("supervisors"):
        return Supervisor()
    elif user.is_in_group("students"):
        return Student()
    elif user.is_in_group("porters"):
        return Porter()
    else:
        raise ValueError
from django.db import models

from organizations.models import Dorm
from users.models import CustomUser


class User_Associate_with_Dorm(models.Model):
    id_user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    id_dorm = models.ForeignKey(Dorm, on_delete=models.SET(0))

    @staticmethod
    def association_exist(dorm_id, user_id):
        if len(User_Associate_with_Dorm.objects.filter(id_dorm_id=dorm_id, id_user=user_id)) != 0:
            return True
        return False

    @staticmethod
    def associate(userEmail, dormName):
        association = User_Associate_with_Dorm()

        user = CustomUser.objects.filter(email=userEmail)[0]
        association.id_user = user

        dorm = Dorm.objects.filter(name=dormName)[0]
        association.id_dorm = dorm

        if User_Associate_with_Dorm.association_exist(dorm.id, user.id):
            pass
        else:
            association.save()from django.db import models

from organizations.models import Organization
from users.models import CustomUser


class User_Associate_with_Organization(models.Model):
    id_user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    id_organization = models.ForeignKey(Organization, on_delete=models.SET(0))

    @staticmethod
    def association_exist(organizationId, user_id):
        if len(User_Associate_with_Organization.objects.filter(id_organization_id=organizationId, id_user_id=user_id)) != 0:
            return True
        return False

    @staticmethod
    def associate(userEmail, organizationAcronym):
        association = User_Associate_with_Organization()

        user = CustomUser.objects.filter(email=userEmail)[0]
        organization = Organization.objects.filter(acronym=organizationAcronym)[0]

        association.id_user = user
        association.id_organization = organization

        if User_Associate_with_Organization.association_exist(organization.id, user.id):
            Warning("association_exist")
        else:
            association.save()


from django.db import models
from ipware import get_client_ip

from datetime import timedelta, time
import time as basic_time

from global_fun import get_actual_time
from organizations.models import Dorm
from users.models import CustomUser

class BlockedUsers(models.Model):
    login = models.TextField(default="")
    count = models.TextField(default=0)
    ip = models.TextField(default="")
    blocked = models.BooleanField(default=False)
    blocking_time = models.TimeField(default="00:00:00")
    maxAttemptsNumber = 5

    def block_time_passed(self):
        t = basic_time.localtime()
        actual_time = basic_time.strftime("%H:%M:%S", t)
        t1 = timedelta(hours=time.fromisoformat(actual_time).hour, minutes=time.fromisoformat(actual_time).minute
                       , seconds=time.fromisoformat(actual_time).second)
        t2 = timedelta(hours=self.blocking_time.hour, minutes=self.blocking_time.minute
                       , seconds=self.blocking_time.second)
        min_waiting_seconds = 5

        return False if t1.total_seconds() - t2.total_seconds() < min_waiting_seconds else True

    def increase_number_of_wrong_attempts(self):
        self.count = str(int(self.count) + 1)
        self.save()

    def check_count_breach_and_block(self):
        if self.count == str(self.maxAttemptsNumber):
            self._block()

    def _block(self):
        t = basic_time.localtime()
        actual_time = basic_time.strftime("%H:%M:%S", t)
        self.blocked = True
        self.blocking_time = actual_time
        self.save()

    def delete_user_from_blocked_list(self):
        self.delete()

    @staticmethod
    def delete_user_from_blocked_list_by_ip(client_ip):
        blockedUser = BlockedUsers.objects.filter(ip=client_ip)
        blockedUser.delete()

    @staticmethod
    def create_blocked_user(request):
        actual_time = get_actual_time()
        client_ip, is_routable = get_client_ip(request)
        blockedUser = BlockedUsers(login=request.POST['email'], count=1, ip=client_ip, blocked=False, blocking_time=actual_time)
        blockedUser.save()


from rental.models.DBmodels import Item
from security.models.DBmodels import BlockedUsersfrom organizations.models import Dorm
from security.models.DBmodels.User_Associate_with_Dorm import User_Associate_with_Dorm
from security.models.DBmodels.User_Associate_with_Organization import User_Associate_with_Organization
from security.models.NonDBmodels.ICheckerRequirement import ICheckerRequirement


class Student:
    __metaclass__ = ICheckerRequirement

    def check_requirement(self, user, organizationID, dormName):
        if Dorm.dorm_exist(dormName):
            dormID = Dorm.objects.filter(name=dormName)[0].id
            if User_Associate_with_Organization.association_exist(organizationID, user.id) and \
                    User_Associate_with_Dorm.association_exist(dormID, user.id):
                return True
        return False
from organizations.models import Dorm
from security.models.DBmodels.User_Associate_with_Dorm import User_Associate_with_Dorm
from security.models.DBmodels.User_Associate_with_Organization import User_Associate_with_Organization
from security.models.NonDBmodels.ICheckerRequirement import ICheckerRequirement


class Porter:
    __metaclass__ = ICheckerRequirement

    def check_requirement(self, user, organizationID, dormName):
        if User_Associate_with_Organization.association_exist(organizationID, user.id):
            return True
        return Falsefrom abc import ABC


class ICheckerRequirement(ABC):
    def check_requirement(self, organizationID, dormName):
        passfrom security.models.DBmodels.User_Associate_with_Organization import User_Associate_with_Organization
from security.models.NonDBmodels.ICheckerRequirement import ICheckerRequirement


class Supervisor:
    __metaclass__ = ICheckerRequirement

    def check_requirement(self, user, organizationID, dormName):
        if User_Associate_with_Organization.association_exist(organizationID, user.id):
            return True
        return False
# Generated by Django 3.0.8 on 2020-08-09 17:13

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('organizations', '0002_auto_20200809_1712'),
    ]

    operations = [
        migrations.RenameModel(
            old_name='associate_with_Dorm',
            new_name='associate_with_Dorms',
        ),
    ]
# Generated by Django 3.0.8 on 2020-08-08 20:25

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Dorm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60)),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60)),
                ('acronym', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Dorm_associative_Oraganaizor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_dorm', models.ForeignKey(on_delete=models.SET(0), to='organizations.Dorm')),
                ('id_organization', models.ForeignKey(on_delete=models.SET(0), to='organizations.Organization')),
            ],
        ),
    ]
# Generated by Django 3.0.8 on 2020-08-09 17:12

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('organizations', '0001_initial'),
    ]

    operations = [
        migrations.RenameModel(
            old_name='Dorm_associative_Oraganaizor',
            new_name='associate_with_Dorm',
        ),
    ]
import global_funfrom django.shortcuts import render, redirect

# Create your views here.

from organizations.models import Organization

def get_organization_view(request):
    context = _prepare_organization_data(request)
    return render(request, template_name='security/organization.html', context=context)



def _prepare_organization_data(request):
    imgPath = Organization.get_every_organizations_paths_to_logos()
    acronyms = Organization.get_every_organizations_acronyms()
    context = {
        'organizationsAcronym': acronyms,
        'organizations_logo_path': imgPath,
        'organizationsAcronymsAndPathToIMG': zip(acronyms,imgPath)
    }
    return context

from unittest import TestCase

from django.test import TestCase


from django.contrib import admin

# Register your models here.
from organizations.models import Organization

admin.site.register(Organization)from django.db import models

# Create your models here.
from django.shortcuts import redirect, render

from global_fun import get_column_values


class Organization(models.Model):
    name = models.CharField(max_length=60)
    acronym = models.CharField(max_length=10)

    @staticmethod
    def get_every_organizations_paths_to_logos():
        acronyms = Organization.get_every_organizations_acronyms()
        imgPath = ["img/" + path + "_logo.png" for path in acronyms]
        return imgPath

    @staticmethod
    def get_every_organizations_acronyms():
        querySet = Organization.objects.values('acronym')
        acronyms = get_column_values(querySet, 'acronym')
        return acronyms

    @staticmethod
    def organization_in_db(acronym):
        acronyms = Organization.get_every_organizations_acronyms()
        return True if acronym in acronyms else False

    @staticmethod
    def set_organization(request):
        organizationAcronym = request.POST.get('organization')
        if Organization.organization_in_db(organizationAcronym):
            organization = Organization.objects.filter(acronym=organizationAcronym)[0]
            request.session['organization_id'] = organization.id
            return redirect('/')
        else:
            return redirect('organization')

    def get_dorms_names(self):
        organizationsDormitoriesIdsQS = Associate_with_Dorms.objects.values('id_dorm').filter(id_organization=self.id)
        organizationsDormitoriesIds = get_column_values(organizationsDormitoriesIdsQS, 'id_dorm')

        DormsObjects = Dorm.objects.all()
        querySets = []
        for i in organizationsDormitoriesIds:
            querySets.append(DormsObjects.filter(id=i).values('name'))

        organizationsDormitoriesNames = [i[0]['name'] for i in querySets]

        return organizationsDormitoriesNames


class Dorm(models.Model):
    name = models.CharField(max_length=60)

    @staticmethod
    def dorm_exist(dormName):
        dorms = list(Dorm.objects.filter(name=dormName))
        if len(dorms) != 0:
            return True
        return False

    @staticmethod
    def get_dorm_id(dormName):
        dorms = list(Dorm.objects.filter(name=dormName))
        return dorms[0].id


class Associate_with_Dorms(models.Model):
    id_dorm = models.ForeignKey(Dorm, on_delete=models.SET(0))
    id_organization = models.ForeignKey(Organization, on_delete=models.SET(0))

    @staticmethod
    def associate(dormName, organizationAcronym):
        association = Associate_with_Dorms()
        x = 1
        dorm = Dorm.objects.filter(name=dormName)[0]
        organization = Organization.objects.filter(acronym=organizationAcronym)[0]

        association.id_dorm = dorm
        association.id_organization = organization

        if Associate_with_Dorms.association_exist(dorm.id, organization.id):
            Warning("association_exist")
        else:
            association.save()

    @staticmethod
    def association_exist(dorm_id, organization_id):
        if len(Associate_with_Dorms.objects.filter(id_dorm_id=dorm_id, id_organization_id=organization_id)) != 0:
            return True
        return Falsefrom django.apps import AppConfig


class OrganizationsConfig(AppConfig):
    name = 'organizations'
_key = '64s57z(!=g+h@@+t7to*r$bcu4aanzzh5ilc7h*s&!fl4+50$n'
# _dbProperittis = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'localDN',
#         'USER': 'tkacza',
#         'PASSWORD': 'pomidorowa287',
#         'HOST': 'localhost',
#         'PORT': '3306'
#     }
# }
# _dbProperittis = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'Crz21y9eb6',
#         'USER': 'Crz21y9eb6',
#         'PASSWORD': '0rjs7YeNH2',
#         'HOST': 'remotemysql.com',
#         'PORT': '3306'
#     }
# }

_dbProperittis = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'DormitoryNotebooksETDB',
        'USER': 'tkaczadb',
        'PASSWORD': 'barszcz4',
        'HOST': 'localhost',
        'PORT': '3306'
    }
}from django import forms


class BreakdownForm(forms.Form):
    description = forms.CharField(widget=forms.TextInput(attrs={'style': 'width:40%', "placeholder": "Opis awarii"}))


class RemoveBreakdownForm(forms.Form):
    id = forms.IntegerField()
    button_flag = 1
    def __init__(self, id):
        super().__init__()
        self.fields["id"] = forms.IntegerField(initial=id)
        self.fields["id"].widget = forms.HiddenInput()# Generated by Django 3.0.8 on 2021-01-13 09:35

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organizations', '0003_auto_20200809_1713'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Breakdowns',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=600)),
                ('isSolved', models.BooleanField(default=False)),
                ('dorm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organizations.Dorm')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
# Generated by Django 3.0.8 on 2021-01-20 12:33

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('breakdowns', '0002_breakdowns_rentaldate'),
    ]

    operations = [
        migrations.RenameField(
            model_name='breakdowns',
            old_name='rentalDate',
            new_name='requestDate',
        ),
    ]
# Generated by Django 3.0.8 on 2021-01-20 12:02

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('breakdowns', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='breakdowns',
            name='rentalDate',
            field=models.DateField(default=None),
        ),
    ]
from MySQLdb.converters import NoneType
from django.shortcuts import render, redirect
from MySQLdb import Date

# Create your views here.
from breakdowns.forms import BreakdownForm, RemoveBreakdownForm
from breakdowns.models import Breakdowns
from global_fun import *


def create_breakdown_view(request):
    isPorter = True if request.user.is_in_group("porters") else False
    # todo create buttons to set breakdown as removed
    breakdownData = _prepare_breakdown_data(request)
    form = BreakdownForm()

    context = {
        'breakdownData': breakdownData,
        'form': form,
        'isPorter': isPorter
    }

    return render(request, "breakdowns/breakdowns.html", context=context)


def remove_breakdown(request):
    # todo validate this id
    breakdown_id = request.POST['id']
    Breakdowns.remove_breakdown(breakdown_id)
    return redirect(create_breakdown_view)


def _prepare_breakdown_data(request):
    dormId = request.session.get('dorm_id')
    breakdownsLogs = Breakdowns.objects.filter(dorm_id=dormId)
    dates = [row.requestDate.isoformat() for row in breakdownsLogs]
    users = [row.user for row in breakdownsLogs]
    userNames = [user.first_name for user in users]
    userLastNames = [user.last_name for user in users]
    roomUserNumbers = [user.room_number for user in users]
    description = [row.description for row in breakdownsLogs]
    stateds_db = [row.isSolved for row in breakdownsLogs]
    stateds = ["do usunięcia" if stade is False else "usunięta" for stade in stateds_db]
    # form.
    logsID = [log.id for log in breakdownsLogs]
    removeBreakdownForms = [RemoveBreakdownForm(id) for id in logsID]

    rentData = zip(dates, userNames, userLastNames, roomUserNumbers, description, stateds, removeBreakdownForms)
    return rentData


def request_breakdown(request):
    print_Post(request)
    print_session(request)

    requestDate, user_id, description, dorm_id = _prepare_breakdown_request_data(request)

    breakdown = Breakdowns(requestDate=requestDate, user_id=user_id, description=description, isSolved=False,
                           dorm_id=dorm_id)
    breakdown.save()

    return redirect(create_breakdown_view)


def _prepare_breakdown_request_data(request):
    description = request.POST["description"]
    requestDate = Date.today()
    user_id = request.user.id
    dorm_id = request.session["dorm_id"]
    return requestDate, user_id, description, dorm_id
from django.test import TestCase

# Create your tests here.
from django.contrib import admin

# Register your models here.
from django.db import models

# Create your models here.
from organizations.models import Dorm
from users.models import CustomUser


class Breakdowns(models.Model):
    requestDate = models.DateField(default=None)
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    description = models.CharField(max_length=600)
    isSolved = models.BooleanField(default=False)
    dorm = models.ForeignKey(Dorm, on_delete=models.CASCADE)

    @staticmethod
    def remove_breakdown(id):
        breakdown = Breakdowns.objects.filter(id=id)[0]
        breakdown.isSolved = True
        breakdown.save()
from django.apps import AppConfig


class BreakdownsConfig(AppConfig):
    name = 'breakdowns'
from django.contrib.auth.decorators import login_required
from django.shortcuts import render, redirect

# Create your views here.
from django.contrib.auth import views as auth_views

from global_fun import print_with_enters, print_session, get_column_values, make_unique_list
from rental.models.DBmodels.Item import Item


@login_required(redirect_field_name='', login_url='/')
def get_choice_view(request):
    dorm_id = request.session["dorm_id"]
    itemsInDorm = _prepare_items_in_dorm(dorm_id)
    context = {
        "itemsInDorm": itemsInDorm
    }

    return render(request, "panel/choice.html", context=context)

def _prepare_items_in_dorm(dorm_id):
    itemsInDorm = Item.objects.filter(dorm_id=dorm_id).values_list("name")
    itemsInDorm = make_unique_list(itemsInDorm)
    itemsInDorm = _unpack_from_tuples(itemsInDorm)
    itemsInDorm.sort()
    return itemsInDorm

def _unpack_from_tuples(list):
    return [tuple[0] for tuple in list]from django.test import TestCase

# Create your tests here.
from django.contrib import admin

# Register your models here.
from django.db import models

# Create your models here.
from django.apps import AppConfig


class HomeConfig(AppConfig):
    name = 'choice'
# Generated by Django 3.0.8 on 2020-08-26 12:23

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='customuser',
            name='room_number',
            field=models.CharField(default=None, max_length=10),
        ),
    ]
# Generated by Django 3.0.8 on 2020-08-26 10:51

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
# Generated by Django 3.0.8 on 2020-08-27 11:42

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0002_customuser_room_number'),
    ]

    operations = [
        migrations.AlterField(
            model_name='customuser',
            name='room_number',
            field=models.CharField(default=None, max_length=10, null=True),
        ),
    ]
from django.contrib.auth.base_user import BaseUserManager
from django.utils.translation import ugettext_lazy as _


class CustomUserManager(BaseUserManager):
    """
    Custom user model manager where email is the unique identifiers
    for authentication instead of usernames.
    """
    def create_user(self, email, password, **extra_fields):
        """
        Create and save a User with the given email and password.
        """
        if not email:
            raise ValueError(_('The Email must be set'))
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save()
        return user

    def create_superuser(self, email, password, **extra_fields):
        """
        Create and save a SuperUser with the given email and password.
        """
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        extra_fields.setdefault('is_active', True)

        if extra_fields.get('is_staff') is not True:
            raise ValueError(_('Superuser must have is_staff=True.'))
        if extra_fields.get('is_superuser') is not True:
            raise ValueError(_('Superuser must have is_superuser=True.'))
        return self.create_user(email, password, **extra_fields)
from django.shortcuts import render

# Create your views here.
from django.test import TestCase
from django.contrib.auth import get_user_model


class UsersManagersTests(TestCase):

    def test_create_user(self):
        User = get_user_model()
        user = User.objects.create_user(email='normal@user.com', password='foo')
        self.assertEqual(user.email, 'normal@user.com')
        self.assertTrue(user.is_active)
        self.assertFalse(user.is_staff)
        self.assertFalse(user.is_superuser)
        try:
            # username is None for the AbstractUser option
            # username does not exist for the AbstractBaseUser option
            self.assertIsNone(user.username)
        except AttributeError:
            pass
        with self.assertRaises(TypeError):
            User.objects.create_user()
        with self.assertRaises(TypeError):
            User.objects.create_user(email='')
        with self.assertRaises(ValueError):
            User.objects.create_user(email='', password="foo")

    def test_create_superuser(self):
        User = get_user_model()
        admin_user = User.objects.create_superuser('super@user.com', 'foo')
        self.assertEqual(admin_user.email, 'super@user.com')
        self.assertTrue(admin_user.is_active)
        self.assertTrue(admin_user.is_staff)
        self.assertTrue(admin_user.is_superuser)
        try:
            # username is None for the AbstractUser option
            # username does not exist for the AbstractBaseUser option
            self.assertIsNone(admin_user.username)
        except AttributeError:
            pass
        with self.assertRaises(ValueError):
            User.objects.create_superuser(
                email='super@user.com', password='foo', is_superuser=False)
from django.contrib import admin

# Register your models here.
from django.contrib import admin

from users.models import CustomUser


class AuthorAdmin(admin.ModelAdmin):
    pass
admin.site.register(CustomUser, AuthorAdmin)
from django.db import models
from django.contrib.auth.models import AbstractUser, Group
from django.utils.translation import ugettext_lazy as _

from .managers import CustomUserManager


class CustomUser(AbstractUser):
    username = None
    email = models.EmailField(_('email address'), unique=True)
    room_number = models.CharField(max_length=10, default=None, null=True)

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = []

    objects = CustomUserManager()

    def __str__(self):
        return self.email

    def is_in_any_group(self):
        user_groups = self.groups.all()
        if len(user_groups) == 0:
            return False
        return True

    def is_in_group(self, group_name):
        groups = Group.objects.all()

        a = groups.filter(name=group_name)
        b = self.groups.all()
        if all(x in a for x in b):
            return True
        return False
from django.apps import AppConfig


class UsersConfig(AppConfig):
    name = 'users'
"""
WSGI config for DormitoryNotebooksET project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'DormitoryNotebooksET.settings')

application = get_wsgi_application()
"""
ASGI config for DormitoryNotebooksET project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'DormitoryNotebooksET.settings')

application = get_asgi_application()
"""DormitoryNotebooksET URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.choice, name='choice')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='choice')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from django.urls import path
from django.contrib.auth import views as authViews

from breakdowns.views import request_breakdown
from rental.models.DBmodels.RentItem import RentItem
from security import views as securityViews
from organizations import views as organizationsViews
from choice import views as choiceViews
from rental import views as rentalViews
from breakdowns import views as breakdownsViews
from organizations.models import Organization
from security.basicdb import create_basic_db

urlpatterns = [
    # views
    path('', securityViews.get_home_view, name='index'),
    path('registration', securityViews.get_registration_view, name='registration'),
    path('admin/', admin.site.urls),
    path('choice/', choiceViews.get_choice_view, name='choice'),
    path('rent/', rentalViews.create_base_view, name='rent'),
    path('organization/', organizationsViews.get_organization_view, name='organization'),
    path('breakdowns/', breakdownsViews.create_breakdown_view, name='breakdowns'),
    # fun
    path('set_organization/', Organization.set_organization, name='set_organization'),
    path('login/', securityViews.log_in, name="login"),
    path('logout/', authViews.LogoutView.as_view(template_name='security/home.html'), name='logout'),
    path('rentItem/', RentItem.decide_about_rent, name='decideAboutRent'),
    path('create_basic_db/', create_basic_db, name='create_basic_db'),
    path('request_breakdown/', breakdownsViews.request_breakdown, name='request_breakdown'),
    path('remove_breakdown/', breakdownsViews.remove_breakdown, name='remove_breakdown'),
    path('register/', securityViews.register, name='register')
]"""
Django settings for DormitoryNotebooksET project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
from secret import _key

SECRET_KEY = _key

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['0.0.0.0', '127.0.0.1', '185.157.164.100', 'testserver', '192.168.1.7']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'choice',
    'security',
    'rental',
    'organizations',
    'users',
    'breakdowns'
]
AUTH_USER_MODEL = 'users.CustomUser'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'DormitoryNotebooksET.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'DormitoryNotebooksET.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
from secret import _dbProperittis

DATABASES = _dbProperittis

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Warsaw'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = '/home/tkacza2/AAA/static_files'
LOGOUT_REDIRECT_URL = "/"
LOGIN_REDIRECT_URL = "/choice"import time as basic_time
from django.core.handlers.wsgi import WSGIRequest


def get_column_values(querySet, column_name):
    querySet = querySet.values(column_name)
    return [i[column_name] for i in [j for j in querySet]]

def change_QuerySet_from_db_to_list(querySet):
    return [x for x in querySet]


def print_with_enters(*valuses):
    print("\n" * 3)
    for val in valuses:
        print(val)
    print("\n" * 3)


def get_actual_time():
    t = basic_time.localtime()
    actual_time = basic_time.strftime("%H:%M:%S", t)
    return actual_time

def print_Post(request: WSGIRequest):
    print("POST:")
    for i in request.POST:
        print('{:>30} => {}'.format(i,request.POST[i]))

def print_session(request: WSGIRequest):
    print("session:")
    for key, value in request.session.items():
        print('{:>30} => {}'.format(key, value))

def make_unique_list(collection):
    collection = set(collection)
    return list(collection)
